using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.Diagnostics.Runtime.Utilities;
using ClrProfiling.ComInterop.Wrappers;

namespace {{ profiler_namespace }}
{
    public static class DllEntryPointExports
    {
        private const int TRUE = 1;
        private const int FALSE = 0;

        private readonly static Guid IID_IUnknown = Guid.Parse("00000000-0000-0000-C000-000000000046");
        private readonly static Guid IID_IClassFactory = Guid.Parse("00000001-0000-0000-C000-000000000046");

        private enum DllMainCallReason
        {
            DLL_PROCESS_DETACH = 0,
            DLL_PROCESS_ATTACH = 1,
            DLL_THREAD_ATTACH = 2,
            DLL_THREAD_DETACH = 3
        }

        [UnmanagedCallersOnly(EntryPoint = "DllGetClassObject")]
        public static unsafe int DllGetClassObject(Guid* rclsid, Guid* riid, IntPtr* ppv)
        {
            var profGuid = *rclsid;
            var guid = *riid;
            if (guid == IID_IUnknown
             || guid == IID_IClassFactory)
            {
                var cw = new ClassFactoryComWrappers();

                object profilerInst = profGuid.ToString().ToUpper() switch
                {
        {{ for $p in profilers_map }}
            {{ $p.key }} => new {{ $p.value }}(),
        {{ end }}
                   _ => null
                };
                
                if (profilerInst == null)
                {
                    Console.WriteLine($"No registered profiler for GUID: <{profGuid}>");
                    *ppv = IntPtr.Zero;
                     return HResult.E_NOINTERFACE;
                }

                var classFactory = new DefaultClassFactory(profilerInst);

                IntPtr ccwUnknown = cw.GetOrCreateComInterfaceForObject(
                    classFactory,
                    CreateComInterfaceFlags.None);

                var hr = Marshal.QueryInterface(ccwUnknown, ref guid, out var ptr);

                Debug.Assert(hr == 0);

                *ppv = ptr;
                
                return HResult.S_OK;
            }

            *ppv = IntPtr.Zero;
            return HResult.E_NOINTERFACE;
        }

        [UnmanagedCallersOnly(EntryPoint = "DllCanUnloadNow")]
        public static unsafe int DllCanUnloadNow()
        {
            return HResult.S_OK;
        }

        [UnmanagedCallersOnly(EntryPoint = "DllMain")]
        public static unsafe int DllMain(IntPtr hModule, int fwReason, IntPtr reserved)
        {
            var reason = (DllMainCallReason)fwReason;

            switch (reason)
            {
                case DllMainCallReason.DLL_PROCESS_ATTACH:
                case DllMainCallReason.DLL_THREAD_ATTACH:
                case DllMainCallReason.DLL_THREAD_DETACH:
                    break;
                case DllMainCallReason.DLL_PROCESS_DETACH:
                    break;
            }

            return TRUE;
        }
    }
}